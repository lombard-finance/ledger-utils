package chainid

import (
	"strings"

	"github.com/lombard-finance/ledger-utils/common"
)

type EVMLChainId struct {
	lChainId
}

// NewEVMLChainId returns a new LChainId instance for the provided chain Id.
// Chain Id must be provided in hex form eith either with or w/o the leading 0x
func NewEVMLChainId(id string) (*EVMLChainId, error) {
	trimmed := strings.TrimPrefix(id, "0x")
	if len(trimmed) > ChainIdLength*2 {
		return nil, NewErrLength(ChainIdLength, len(trimmed))
	}
	var innerChainId *lChainId
	var err error
	if len(trimmed) == 64 {
		innerChainId, err = newLChainIdFromHex(EcosystemEVM.ToEcosystemHexByte() + trimmed[2:])
	} else {
		innerChainId, err = newLChainIdFromHex(
			EcosystemEVM.ToEcosystemHexByte() +
				common.Repeated64Zeros[len(trimmed)+2:] +
				trimmed,
		)
	}
	if err != nil {
		return nil, err
	}
	return &EVMLChainId{lChainId: *innerChainId}, nil
}

// NewEVMEthereumLChainId returns the LChainId for the Ethereum blockchain (0x1)
func NewEVMEthereumLChainId() EVMLChainId {
	return EVMLChainId{
		lChainId{
			inner: []byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1},
		},
	}
}

// NewEVMHoleskyLChainId returns the LChainId for the Ethereum Holesky blockchain (0x4268)
func NewEVMHoleskyLChainId() EVMLChainId {
	return EVMLChainId{
		lChainId{
			inner: []byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x42, 0x68},
		},
	}
}

// NewEVMSepoliaLChainId returns the LChainId for the Ethereum Sepolia blockchain (0xaa36a7)
func NewEVMSepoliaLChainId() EVMLChainId {
	return EVMLChainId{
		lChainId{
			inner: []byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xaa, 0x36, 0xa7},
		},
	}
}

// NewEVMBinanceSmartChainLChainId returns the LChainId for the Binance Smart Chain blockchain (0x38)
func NewEVMBinanceSmartChainLChainId() EVMLChainId {
	return EVMLChainId{
		lChainId{
			inner: []byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38},
		},
	}
}

// NewEVMBaseLChainId returns the LChainId for the Base blockchain (0x2105)
func NewEVMBaseLChainId() EVMLChainId {
	return EVMLChainId{
		lChainId{
			inner: []byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x21, 0x05},
		},
	}
}

// NewEVMBaseSepoliaLChainId returns the LChainId for the Base Sepolia blockchain (0x14a34)
func NewEVMBaseSepoliaLChainId() EVMLChainId {
	return EVMLChainId{
		lChainId{
			inner: []byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x4a, 0x34},
		},
	}
}
